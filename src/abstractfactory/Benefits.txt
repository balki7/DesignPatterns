Benefits :

Abstract Factory design pattern provides approach to code for interface rather than implementation.
Abstract Factory pattern is “factory of factories” and can be easily extended to accommodate more products, for example we can add another sub-class Laptop and a factory LaptopFactory.
Abstract Factory pattern is robust and avoid conditional logic of Factory pattern.


The pattern is best utilised when your system has to create multiple families of products or you want to provide a library of 
products without exposing the implementation details. As you'll have noticed, a key characteristic is that the pattern will 
decouple the concrete classes from the client. 

An example of an Abstract Factory in use could be UI toolkits. Across Windows, Mac and Linux, UI composites such as windows, 
buttons and textfields are all provided in a widget API like SWT. However, the implementation of these widgets vary across platforms. 
You could write a platform independent client thanks to the Abstract Factory implementation. 